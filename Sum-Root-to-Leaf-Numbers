// 二叉树广度遍历
// 
#include <stdio.h>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <map>
using namespace std;
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        if (!root)
            return 0;
        deque<TreeNode*> q;
        q.push_back(root);
        int total_sum = 0;
        while (q.size())
        {
            TreeNode* t = q.front();
            
            if (!t->left && !t->right)
            {
                total_sum += t->val;
                q.pop_front();
                continue;
            }
            int num10 = t->val*10;
            if (t->left)
            {
                t->left->val = num10 + t->left->val;
                q.push_back(t->left);
            }
            if (t->right)
            {
                t->right->val = num10 + t->right->val;
                q.push_back(t->right);
            }
            q.pop_front();
        }
        return total_sum;
    }
};
void test1()
{
    Solution s;
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->left->left = root->left->right = 0;
    root->right = new TreeNode(3);
    root->right->left = root->right->right = 0;
    printf("test1 %d\n", s.sumNumbers(root));
}
void test2()
{
    Solution s;
}
void test3()
{
    Solution s;
    //int A[] = {-1};
    //printf("test3 %d\n", s.maxSubArray(A, 1) == -1);     
}
int main()
{
    test1();
    test2();
    test3();
    return 0;
}