// 动态规划，类似数字三角形

#include "stdafx.h"
#include <stdio.h>
#include <vector>
#include <string>
#include <stack>
#include <map>
using namespace std;
class Solution {
public:
    int max_int;
    int visit[200][200];
    int minPathSum(vector<vector<int> > &grid) {
        max_int = 999999999;
        int rows = grid.size();
        int cols = grid[0].size();
        for (int i = 0; i < rows; i++)
            for (int k = 0; k < cols; k++)
                visit[i][k] = 0;
        return minSum(rows-1, cols-1, grid);
    }
    int minSum(int targetX, int targetY, vector<vector<int> > &grid)
    {
        if (targetX < 0 || targetY < 0)
            return max_int;
        if (targetX == 0 && targetY == 0)
            return grid[0][0];
        
        if (visit[targetX][targetY]>0)
            return visit[targetX][targetY];
        int up = minSum(targetX-1, targetY, grid);
        int left = minSum(targetX, targetY-1, grid);
        visit[targetX][targetY] = min(up, left)+grid[targetX][targetY];
        return visit[targetX][targetY];
    }
};
void test1()
{
    Solution s;
    vector<vector<int> > g;
    vector<int> v;
    v.push_back(1);v.push_back(2);//v.push_back(3);
    g.push_back(v);
    v.clear();
    v.push_back(4);v.push_back(5);//v.push_back(6);
    g.push_back(v);
    /*v.clear();
    v.push_back(7);v.push_back(8);v.push_back(9);
    g.push_back(v);*/
    printf("test %d\n", s.minPathSum(g));
    //s.searchMatrix
    //int A[] = {1,2,0};
    //s.sortColors(A, 3);
}
void test2()
{
    Solution s;
}
void test3()
{
    Solution s;
    //int A[] = {-1};
    //printf("test3 %d\n", s.maxSubArray(A, 1) == -1);     
}
int main()
{
    test1();
    test2();
    test3();
    return 0;
}
